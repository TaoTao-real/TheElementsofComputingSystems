// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux4Way16.hdl

/**
 * 4-way 16-bit multiplexor:
 * out = a if sel == 00
 *       b if sel == 01
 *       c if sel == 10
 *       d if sel == 11
 */

CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:
    Not(in = sel[0], out = nsel0);
    Not(in = sel[1], out = nsel1);

    Mux(a = a[0], b = b[0], sel = sel[0], out = muxab0sel0);
    And(a = muxab0sel0, b = nsel1, out = andmuxab0sel0nsel1);
    Mux(a = c[0], b = d[0], sel = sel[0], out = muxcd0sel0);
    And(a = muxcd0sel0, b = sel[1], out = andmuxcd0sel0sel1);
    Or(a = andmuxab0sel0nsel1, b = andmuxcd0sel0sel1, out = out[0]);

    Mux(a = a[1], b = b[1], sel = sel[0], out = muxab1sel0);
    And(a = muxab1sel0, b = nsel1, out = andmuxab1sel0nsel1);
    Mux(a = c[1], b = d[1], sel = sel[0], out = muxcd1sel0);
    And(a = muxcd1sel0, b = sel[1], out = andmuxcd1sel0sel1);
    Or(a = andmuxab1sel0nsel1, b = andmuxcd1sel0sel1, out = out[1]);

    Mux(a = a[2], b = b[2], sel = sel[0], out = muxab2sel0);
    And(a = muxab2sel0, b = nsel1, out = andmuxab2sel0nsel1);
    Mux(a = c[2], b = d[2], sel = sel[0], out = muxcd2sel0);
    And(a = muxcd2sel0, b = sel[1], out = andmuxcd2sel0sel1);
    Or(a = andmuxab2sel0nsel1, b = andmuxcd2sel0sel1, out = out[2]);

    Mux(a = a[3], b = b[3], sel = sel[0], out = muxab3sel0);
    And(a = muxab3sel0, b = nsel1, out = andmuxab3sel0nsel1);
    Mux(a = c[3], b = d[3], sel = sel[0], out = muxcd3sel0);
    And(a = muxcd3sel0, b = sel[1], out = andmuxcd3sel0sel1);
    Or(a = andmuxab3sel0nsel1, b = andmuxcd3sel0sel1, out = out[3]);

    Mux(a = a[4], b = b[4], sel = sel[0], out = muxab4sel0);
    And(a = muxab4sel0, b = nsel1, out = andmuxab4sel0nsel1);
    Mux(a = c[4], b = d[4], sel = sel[0], out = muxcd4sel0);
    And(a = muxcd4sel0, b = sel[1], out = andmuxcd4sel0sel1);
    Or(a = andmuxab4sel0nsel1, b = andmuxcd4sel0sel1, out = out[4]);

    Mux(a = a[5], b = b[5], sel = sel[0], out = muxab5sel0);
    And(a = muxab5sel0, b = nsel1, out = andmuxab5sel0nsel1);
    Mux(a = c[5], b = d[5], sel = sel[0], out = muxcd5sel0);
    And(a = muxcd5sel0, b = sel[1], out = andmuxcd5sel0sel1);
    Or(a = andmuxab5sel0nsel1, b = andmuxcd5sel0sel1, out = out[5]);

    Mux(a = a[6], b = b[6], sel = sel[0], out = muxab6sel0);
    And(a = muxab6sel0, b = nsel1, out = andmuxab6sel0nsel1);
    Mux(a = c[6], b = d[6], sel = sel[0], out = muxcd6sel0);
    And(a = muxcd6sel0, b = sel[1], out = andmuxcd6sel0sel1);
    Or(a = andmuxab6sel0nsel1, b = andmuxcd6sel0sel1, out = out[6]);

    Mux(a = a[7], b = b[7], sel = sel[0], out = muxab7sel0);
    And(a = muxab7sel0, b = nsel1, out = andmuxab7nsel0nsel1);
    Mux(a = c[7], b = d[7], sel = sel[0], out = muxcd7sel0);
    And(a = muxcd7sel0, b = sel[1], out = andmuxcd7nsel0sel1);
    Or(a = andmuxab7nsel0nsel1, b = andmuxcd7nsel0sel1, out = out[7]);

    Mux(a = a[8], b = b[8], sel = sel[0], out = muxab8sel0);
    And(a = muxab8sel0, b = nsel1, out = andmuxab8sel0nsel1);
    Mux(a = c[8], b = d[8], sel = sel[0], out = muxcd8sel0);
    And(a = muxcd8sel0, b = sel[1], out = andmuxcd8sel0sel1);
    Or(a = andmuxab8sel0nsel1, b = andmuxcd8sel0sel1, out = out[8]);

    Mux(a = a[9], b = b[9], sel = sel[0], out = muxab9sel0);
    And(a = muxab9sel0, b = nsel1, out = andmuxab9sel0nsel1);
    Mux(a = c[9], b = d[9], sel = sel[0], out = muxcd9sel0);
    And(a = muxcd9sel0, b = sel[1], out = andmuxcd9sel0sel1);
    Or(a = andmuxab9sel0nsel1, b = andmuxcd9sel0sel1, out = out[9]);

    Mux(a = a[10], b = b[10], sel = sel[0], out = muxab10sel0);
    And(a = muxab10sel0, b = nsel1, out = andmuxab10sel0nsel1);
    Mux(a = c[10], b = d[10], sel = sel[0], out = muxcd10sel0);
    And(a = muxcd10sel0, b = sel[1], out = andmuxcd10sel0sel1);
    Or(a = andmuxab10sel0nsel1, b = andmuxcd10sel0sel1, out = out[10]);

    Mux(a = a[11], b = b[11], sel = sel[0], out = muxab11sel0);
    And(a = muxab11sel0, b = nsel1, out = andmuxab11sel0nsel1);
    Mux(a = c[11], b = d[11], sel = sel[0], out = muxcd11sel0);
    And(a = muxcd11sel0, b = sel[1], out = andmuxcd11sel0sel1);
    Or(a = andmuxab11sel0nsel1, b = andmuxcd11sel0sel1, out = out[11]);

    Mux(a = a[12], b = b[12], sel = sel[0], out = muxab12sel0);
    And(a = muxab12sel0, b = nsel1, out = andmuxab12sel0nsel1);
    Mux(a = c[12], b = d[12], sel = sel[0], out = muxcd12sel0);
    And(a = muxcd12sel0, b = sel[1], out = andmuxcd12sel0sel1);
    Or(a = andmuxab12sel0nsel1, b = andmuxcd12sel0sel1, out = out[12]);

    Mux(a = a[13], b = b[13], sel = sel[0], out = muxab13sel0);
    And(a = muxab13sel0, b = nsel1, out = andmuxab13sel0nsel1);
    Mux(a = c[13], b = d[13], sel = sel[0], out = muxcd13sel0);
    And(a = muxcd13sel0, b = sel[1], out = andmuxcd13sel0sel1);
    Or(a = andmuxab13sel0nsel1, b = andmuxcd13sel0sel1, out = out[13]);

    Mux(a = a[14], b = b[14], sel = sel[0], out = muxab14sel0);
    And(a = muxab14sel0, b = nsel1, out = andmuxab14sel0nsel1);
    Mux(a = c[14], b = d[14], sel = sel[0], out = muxcd14sel0);
    And(a = muxcd14sel0, b = sel[1], out = andmuxcd14sel0sel1);
    Or(a = andmuxab14sel0nsel1, b = andmuxcd14sel0sel1, out = out[14]);

    Mux(a = a[15], b = b[15], sel = sel[0], out = muxab15sel0);
    And(a = muxab15sel0, b = nsel1, out = andmuxab15sel0nsel1);
    Mux(a = c[15], b = d[15], sel = sel[0], out = muxcd15sel0);
    And(a = muxcd15sel0, b = sel[1], out = andmuxcd15sel0sel1);
    Or(a = andmuxab15sel0nsel1, b = andmuxcd15sel0sel1, out = out[15]);
}